from google.colab import files

uploaded = files.upload() from numpy import loadtxt
from keras.models import Sequential


from keras.layers import Dense
df = genfromtxt("diabetes.csv",delimiter =',') from numpy import loadtxt
from numpy import genfromtxt x=df[:,0:8]

df
y = df[:,8]
model = Sequential() model.add(Dense(12,input_dim=8,activation='relu'))
 
model.add(Dense(8, activation='relu')) model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(x, y, epochs=200, batch_size=10)
_, accuracy = model.evaluate(x,y) print('Accuracy: %.2f' % (accuracy*100))

from sklearn.preprocessing import StandardScaler import pandas
import numpy
from keras.models import Sequential from keras.layers import Dense
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.csv" names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']
dataframe = pandas.read_csv(url, names=names) array = dataframe.values
# separate array into input and output components X = array[:,0:8]
Y = array[:,8]
scaler = StandardScaler().fit(X) rescaledX = scaler.transform(X) # summarize transformed data
numpy.set_printoptions(precision=3) print(rescaledX[0:5,:])

from sklearn.preprocessing import Normalizer import pandas
import numpy
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.csv" names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']
dataframe = pandas.read_csv(url, names=names) array = dataframe.values
# separate array into input and output components X = array[:,0:8]
Y = array[:,8]
scaler = Normalizer().fit(X)
 
normalizedX = scaler.transform(X) # summarize transformed data numpy.set_printoptions(precision=3) print(normalizedX[0:5,:])

from keras.models import Sequential from keras.layers import Dense model = Sequential()
model.add(Dense(12, input_dim=8, activation='relu')) #integer 12 means12 neurons in the first layer
model.add(Dense(8, activation='relu')) #integer 8 means, 8 neurons in thesecond hidden layer #model.add(Dense(1, activation='relu'))
#model.add(Dense(200, activation='relu'))
model.add(Dense(1, activation='sigmoid')) #integer 1 means 1 neuron inthe output layer model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(X, Y, epochs=200, batch_size=10)
_, accuracy = model.evaluate(X, Y) print('Accuracy: %.2f' % (accuracy*100))
