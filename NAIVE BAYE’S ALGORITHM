import numpy as np
import matplotlib.pyplot as plt import matplotlib.image as mpimg import pandas as pd

# Importing the dataset
dataset = pd.read_csv('iris.csv')
 

#Splitting the dataset in independent and dependent variables
X = dataset.iloc[:,:4].values y = dataset['species'].values

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 82)

# Feature Scaling to bring the variable in a single scale
from sklearn.preprocessing import StandardScaler sc = StandardScaler()
X_train = sc.fit_transform(X_train) X_test = sc.transform(X_test)

# Fitting Naive Bayes Classification to the Training set with linear kernel
from sklearn.naive_bayes import GaussianNB nvclassifier = GaussianNB() nvclassifier.fit(X_train, y_train)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix cm = confusion_matrix(y_test, y_pred) print(cm)

#finding accuracy from the confusion matrix.
a = cm.shape corrPred = 0
falsePred = 0

for row in range(a[0]): for c in range(a[1]):
if row == c:
corrPred +=cm[row,c] else:
falsePred += cm[row,c] print('Correct predictions: ', corrPred) print('False predictions', falsePred)
print ('\n\nAccuracy of the Naive Bayes Clasification is: ', corrPred/(cm.sum()))
